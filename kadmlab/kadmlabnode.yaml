---

- name: Configure kadmlabnode servers
  hosts: kadmlabnode
  gather_facts: false
  tasks:

    - name: Wait for kadmlabnode servers to be available
      ansible.builtin.wait_for_connection:
        timeout: 180
        sleep: 10

    - name: Gather facts
      ansible.builtin.setup:

    - name: Update packages
      ansible.builtin.apt:
        name: '*'
        update_cache: true
      register: update_packages

    - name: Reboot if packages updated
      ansible.builtin.reboot: # noqa no-handler
      when: update_packages.changed

    - name: Install CRI-O prerequisites
      ansible.builtin.apt:
        pkg:
          - curl
          - gnupg

    - name: Add CRI-O repository keys
      ansible.builtin.get_url:
        url: '{{ item.url }}'
        dest: '/etc/apt/trusted.gpg.d/{{ item.keyring }}'
        owner: root
        group: root
        mode: 0644
      loop:
        - url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key
          keyring: libcontainers-archive-keyring.asc
        - url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/Release.key
          keyring: libcontainers-crio-archive-keyring.asc

    - name: Add CRI-O repositories
      ansible.builtin.apt_repository:
        repo: '{{ item }}'
      loop:
        - 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/ /'
        - 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.25/xUbuntu_22.04/ /'

    - name: Install CRI-O
      ansible.builtin.apt:
        pkg:
          - cri-o
          - cri-o-runc
        update_cache: true

    - name: Start and enable CRI-O
      ansible.builtin.service:
        name: crio
        state: started
        enabled: true

    - name: Install Kubernetes prerequisites
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl

    - name: Install Kubernetes repository key
      ansible.builtin.get_url:
        url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
        dest: /etc/apt/trusted.gpg.d/kubernetes-apt-key.gpg
        owner: root
        group: root
        mode: 0644

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        repo: 'deb https://apt.kubernetes.io/ kubernetes-xenial main'

    - name: Install kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        pkg:
          - kubelet=1.25.4-00
          - kubeadm=1.25.4-00
          - kubectl=1.25.4-00
        update_cache: true

    - name: Disable firewall and reset to default settings
      community.general.ufw:
        state: reset

    - name: Default deny
      community.general.ufw:
        default: deny

    - name: Allow outgoing traffic
      community.general.ufw:
        direction: out
        rule: allow

    - name: Allow all incoming traffic from the management network
      community.general.ufw:
        interface_in: ens3
        from_ip: 192.168.252.0/24
        rule: allow

    - name: Allow all incoming traffic from the hypervisor on the metallb network
      community.general.ufw:
        interface_in: ens4
        from_ip: 192.168.251.1
        rule: allow

    - name: Enable firewall
      community.general.ufw:
        state: enabled

    - name: Load br_netfilter kernel module on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        owner: root
        group: root
        mode: 0644
        content: |
          br_netfilter

    - name: Load br_netfilter kernel module immediately
      community.general.modprobe:
        name: br_netfilter

    - name: Enable IP forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1

    - name: Enable bridge-nf-call-iptables
      ansible.posix.sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: 1

    - name: Create kubeadm configuration file on initial control plane node
      ansible.builtin.copy:
        dest: /tmp/kubeadm_config.yaml
        owner: root
        group: root
        mode: 0644
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: InitConfiguration
          bootstrapTokens:
          - token: "{{ cluster_token }}"
            ttl: "24h"
          nodeRegistration:
            kubeletExtraArgs:
              node-ip: "{{ cluster_address }}"
          localAPIEndpoint:
            advertiseAddress: "{{ cluster_address }}"
            bindPort: 6443
          certificateKey: "{{ certificate_key }}"
          ---
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            serviceSubnet: "172.16.0.0/16"
            podSubnet: "172.17.0.0/16"
          controlPlaneEndpoint: "controlplane.kadmlab.prism.local:6443"
          apiServer:
            certSANs:
            - "controlplane.kadmlab.prism.local"
      when: initial_control_plane == inventory_hostname

    - name: Run kubeadm init on initial control plane node
      ansible.builtin.command:
        cmd: kubeadm init --upload-certs --config /tmp/kubeadm_config.yaml
      when: initial_control_plane == inventory_hostname

    - name: Delete kubeadm configuration file on initial control plane node
      ansible.builtin.file:
        path: /tmp/kubeadm_init.yaml
        state: absent
      when: initial_control_plane == inventory_hostname

    - name: Download kubeconfig file
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: kubeconfig
        flat: true
      when: initial_control_plane == inventory_hostname

    - name: Generate CA certificate hash
      community.crypto.x509_certificate_info:
        path: /etc/kubernetes/pki/ca.crt
      register: ca_certificate
      delegate_to: '{{ initial_control_plane }}'
      when: inventory_hostname != initial_control_plane

    - name: Create kubeadm configuration file on other control plane nodes
      ansible.builtin.copy:
        dest: /tmp/kubeadm_config.yaml
        owner: root
        group: root
        mode: 0644
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: JoinConfiguration
          discovery:
            bootstrapToken:
              apiServerEndpoint: "controlplane.kadmlab.prism.local:6443"
              token: {{ cluster_token }}
              caCertHashes:
              - sha256:{{ ca_certificate.public_key_fingerprints.sha256 | replace(":", "") }}
          nodeRegistration:
            kubeletExtraArgs:
              node-ip: "{{ cluster_address }}"
          controlPlane:
            localAPIEndpoint:
              advertiseAddress: "{{ cluster_address }}"
              bindPort: 6443
            certificateKey: "{{ certificate_key }}"
      when: (kubernetes_role == 'control plane') and (inventory_hostname != initial_control_plane)

    - name: Run kubeadm join on other control plane nodes
      ansible.builtin.command:
        cmd: kubeadm join --config /tmp/kubeadm_config.yaml
      when: (kubernetes_role == 'control plane') and (inventory_hostname != initial_control_plane)

    - name: Delete kubeadm configuration file on other control plane nodes
      ansible.builtin.file:
        path: /tmp/kubeadm_config.yaml
        state: absent
      when: (kubernetes_role == 'control plane') and (inventory_hostname != initial_control_plane)

    - name: Create kubeadm configuration file on worker nodes
      ansible.builtin.copy:
        dest: /tmp/kubeadm_config.yaml
        owner: root
        group: root
        mode: 0644
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: JoinConfiguration
          discovery:
            bootstrapToken:
              apiServerEndpoint: "controlplane.kadmlab.prism.local:6443"
              token: {{ cluster_token }}
              caCertHashes:
              - sha256:{{ ca_certificate.public_key_fingerprints.sha256 | replace(":", "") }}
          nodeRegistration:
            kubeletExtraArgs:
              node-ip: "{{ cluster_address }}"
      when: kubernetes_role == 'worker'

    - name: Run kubeadm join on worker nodes
      ansible.builtin.command:
        cmd: kubeadm join --config /tmp/kubeadm_config.yaml
      when: kubernetes_role == 'worker'

    - name: Delete kubeadm configuration file on other control plane nodes
      ansible.builtin.file:
        path: /tmp/kubeadm_config.yaml
        state: absent
      when: kubernetes_role == 'worker'

    - name: Download Calico operator manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/tigera-operator.yaml
        dest: /tmp/tigera-operator.yaml
        owner: root
        group: root
        mode: 0644
      when: initial_control_plane == inventory_hostname

    - name: Create Calico operator
      ansible.builtin.command:
        cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f /tmp/tigera-operator.yaml
      when: initial_control_plane == inventory_hostname

    - name: Delete Calico operator manifest
      ansible.builtin.file:
        path: /tmp/tigera-operator.yaml
        state: absent
      when: initial_control_plane == inventory_hostname

    - name: Copy Calico custom resources manifest
      ansible.builtin.copy:
        dest: /tmp/custom-resources.yaml
        owner: root
        group: root
        mode: 0644
        content: |
          apiVersion: operator.tigera.io/v1
          kind: Installation
          metadata:
            name: default
          spec:
            calicoNetwork:
              bgp: Disabled
              ipPools:
              - blockSize: 26
                cidr: 172.17.0.0/16
                encapsulation: VXLAN
              nodeAddressAutodetectionV4:
                kubernetes: NodeInternalIP
          ---
          apiVersion: operator.tigera.io/v1
          kind: APIServer
          metadata:
            name: default
          spec: {}
      when: initial_control_plane == inventory_hostname

    - name: Create Calico custom resources
      ansible.builtin.command:
        cmd: kubectl --kubeconfig /etc/kubernetes/admin.conf create -f /tmp/custom-resources.yaml
      when: initial_control_plane == inventory_hostname

    - name: Delete Calico custom resources manifest
      ansible.builtin.file:
        path: /tmp/custom-resources.yaml
        state: absent
      when: initial_control_plane == inventory_hostname

    - name: Install calicoctl
      ansible.builtin.get_url:
        url: https://github.com/projectcalico/calico/releases/download/v3.24.5/calicoctl-linux-amd64
        dest: /usr/local/bin/calicoctl
        owner: root
        group: root
        mode: 0755

    # - name: Add Helm repository key
    #   ansible.builtin.get_url:
    #     url: https://baltocdn.com/helm/signing.asc
    #     dest: /etc/apt/trusted.gpg.d/helm_signing.asc
    #     owner: root
    #     group: root
    #     mode: 0644

    # - name: Install Helm repository prerequisites
    #   ansible.builtin.apt:
    #     pkg:
    #       - apt-transport-https

    # - name: Add Helm repository
    #   ansible.builtin.apt_repository:
    #     repo: 'deb https://baltocdn.com/helm/stable/debian/ all main'

    # - name: Install Helm
    #   ansible.builtin.apt:
    #     name: helm
    #     update_cache: true

    # - name: Add MetalLB repository
    #   kubernetes.core.helm_repository:
    #     name: metallb
    #     repo_url: https://metallb.github.io/metallb
    #   when: initial_control_plane == inventory_hostname

    # - name: Install MetalLB chart
    #   kubernetes.core.helm:
    #     name: metallb
    #     chart_ref: metallb/metallb
    #     release_namespace: metallb-system
    #     create_namespace: true
    #     kubeconfig: /etc/kubernetes/admin.conf
    #   when: initial_control_plane == inventory_hostname

    # - name: Install Python PIP
    #   ansible.builtin.apt:
    #     name: python3-pip

    # - name: Install Python Kubernetes module
    #   ansible.builtin.pip:
    #     name: kubernetes

    # - name: Configure MetalLB IP address pool
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: metallb.io/v1beta1
    #       kind: IPAddressPool
    #       metadata:
    #         name: kadmlab-ippool
    #         namespace: metallb-system
    #       spec:
    #         addresses:
    #           - '192.168.251.100-192.168.251.199'
    #     kubeconfig: /etc/kubernetes/admin.conf
    #   when: initial_control_plane == inventory_hostname

    # - name: Configure MetalLB L2 advertisement
    #   kubernetes.core.k8s:
    #     state: present
    #     definition:
    #       apiVersion: metallb.io/v1beta1
    #       kind: L2Advertisement
    #       metadata:
    #         name: kadmlab-advert
    #         namespace: metallb-system
    #     kubeconfig: /etc/kubernetes/admin.conf
    #   when: initial_control_plane == inventory_hostname
